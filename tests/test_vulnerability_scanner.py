import unittest
from input_parser import InputParser
from vulnerability_scanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
  """Tests are built on example test_data/input-[0,1,2,3].json, do not change or remove the files,
  otherwise tests would fail.
  The tests are performed over all of the inputs-[0-3].json and compared
  to the expected outputs for each input file and edge cases.
  """
  def setUp(self) -> None:
    # setting both objects of system and scanner to test each method for every input
    self.vsystem3 = InputParser('./tests/test_data/input-3.json')
    self.vsystem2 = InputParser('./tests/test_data/input-2.json')
    self.vsystem1 = InputParser('./tests/test_data/input-1.json')
    self.vsystem0 = InputParser('./tests/test_data/input-0.json')

    self.vscanner3 = VulnerabilityScanner(vm_id='vm-59574582',
                                          vmid_dict=self.vsystem3.get_vmid_to_tags(),
                                          filtered_rules=self.vsystem3.get_filetered_rules())
    self.vscanner2 = VulnerabilityScanner(vm_id='vm-b35b501',
                                          vmid_dict=self.vsystem2.get_vmid_to_tags(),
                                          filtered_rules=self.vsystem2.get_filetered_rules())
    self.vscanner1 = VulnerabilityScanner(vm_id='vm-b8e6c350',
                                          vmid_dict=self.vsystem1.get_vmid_to_tags(),
                                          filtered_rules=self.vsystem1.get_filetered_rules())
    self.vscanner0 = VulnerabilityScanner(vm_id='vm-a211de',
                                          vmid_dict=self.vsystem0.get_vmid_to_tags(),
                                          filtered_rules=self.vsystem0.get_filetered_rules())
    return super().setUp()
  
  def tearDown(self) -> None:
    return super().tearDown()

  def test_vmid(self):
    """test vm_id assigned properly at creation"""
    self.assertEqual(self.vscanner3.vm_id, 'vm-59574582')
    self.assertNotEqual(self.vscanner3.vm_id, 'vm-5967458')

    self.assertEqual(self.vscanner2.vm_id, 'vm-b35b501')

    self.assertEqual(self.vscanner1.vm_id, 'vm-b8e6c350')

    self.assertEqual(self.vscanner0.vm_id, 'vm-a211de')


  def test_get_target_tags(self):
    """test if the target tags match expected target tags"""
    # input 3
    self.assertCountEqual(self.vscanner3.get_target_tags(), [
                                                              "antivirus",
                                                              "ssh",
                                                              "api",
                                                              "windows-dc"])
    # input 2
    self.assertCountEqual(self.vscanner2.get_target_tags(), [
                                                              "ssh",
                                                              "nat",
                                                              "http",
                                                              "loadbalancer",
                                                              "storage"])
    # input 1
    self.assertCountEqual(self.vscanner1.get_target_tags(), [ "windows-dc" ])
    # input 0
    self.assertCountEqual(self.vscanner0.get_target_tags(), [ "ci", "dev" ])

  def test_get_a_set_of_penetrating_tags(self):
    """testing the tags that are in searched vm_id tags, with both src and dest in fw_rules"""
    self.assertCountEqual(self.vscanner3.get_a_set_of_penetrating_tags(), {})
    self.assertCountEqual(self.vscanner2.get_a_set_of_penetrating_tags(), {  "https",
                                                                            "http",
                                                                            "nat",
                                                                            "loadbalancer",
                                                                            "ssh",})
    self.assertCountEqual(self.vscanner1.get_a_set_of_penetrating_tags(), {})
    self.assertCountEqual(self.vscanner0.get_a_set_of_penetrating_tags(), {"ssh"})
  
  def test_find_potential_attackers(self):
    #check if its equal to the answer and not equal to self
    self.assertEqual(self.vscanner3.find_potential_attackers(), [])
    self.assertNotEqual(self.vscanner3.find_potential_attackers(), ['vm-59574582'] )

    self.assertCountEqual(self.vscanner2.find_potential_attackers(), ["vm-ec02d5c153",
                                                                      "vm-a3ed2eed23",
                                                                      "vm-2ba4d2f87",
                                                                      "vm-7d1ff7af47"])
    # check that assertion error raised when vm list with reflexive relation is returned.
    # # (i.e when searched id appears in the list of attackers)
    with self.assertRaises(AssertionError):
      self.assertCountEqual( self.vscanner2.find_potential_attackers(), [
                                                                    "vm-b35b501",
                                                                    "vm-ec02d5c153",
                                                                    "vm-a3ed2eed23",
                                                                    "vm-2ba4d2f87",
                                                                    "vm-7d1ff7af47"])
    self.assertEqual(self.vscanner1.find_potential_attackers(), [])
    self.assertNotEqual(self.vscanner1.find_potential_attackers(), ["vm-b8e6c350"] )
    # vm should be vunlerable by "vm-c7bac01a07"
    self.assertEqual(self.vscanner0.find_potential_attackers(), ["vm-c7bac01a07"])
    # vm should not have empty list of potential attackers
    self.assertNotEqual(self.vscanner0.find_potential_attackers(), [])
    # testing for the other vm_id input 
    self.vscanner0 = VulnerabilityScanner(vm_id="vm-c7bac01a07",
                                          vmid_dict=self.vsystem0.get_vmid_to_tags(),
                                          filtered_rules=self.vsystem0.get_filetered_rules())
    # should have not attackers
    self.assertEqual(self.vscanner0.find_potential_attackers(), [])
    # self attacking is redundant, self id shouldn't be returned
    self.assertNotEqual(self.vscanner0.find_potential_attackers(), ["vm-c7bac01a07"] )
    
  if __name__ == '__main__':
    unittest.main()