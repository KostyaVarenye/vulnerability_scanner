import unittest
from system_loader import SystemLoader
from tests import system_loader_input_data as sl


class TestSystemLoader(unittest.TestCase):
  """Testing proper load and evaluation of SystemLoader inputs"""
  
  def setUp(self) -> None:
    self.vsystem = SystemLoader('./tests/test_data/input-0.json')
    
    # set expected data
    self.exp_data = sl.data
    self.exp_known_tags = sl.known_tags
    self.exp_vmid_to_tags_dict = sl.vmid_to_tags
    self.exp_filtered_rules_d_to_s = sl.filtered_rules

    return super().setUp()

  def tearDown(self) -> None:
    return super().tearDown()
  
  # test loading of data in case the path is incorrect
  def test_default_load_data(self):
    default_vsystem = SystemLoader('./tests/test_data/nput-0.json')
    self.assertEqual(default_vsystem.data, sl.default_load_data)
  
  def test_load_data(self):
    self.assertEqual(self.vsystem.data, self.exp_data)

  def test_get_vms(self):
    self.assertEqual(self.vsystem.get_vms(), self.exp_data["vms"])

  def test_get_known_tags(self):
    self.assertEqual(self.vsystem.get_known_tags(), self.exp_known_tags)

  def test_get_filtered_rules(self):
    self.assertEqual(self.vsystem.get_filetered_rules(), self.exp_filtered_rules_d_to_s)

  def test_get_vmid_to_tags(self):
    self.assertEqual(self.vsystem.get_vmid_to_tags(), self.exp_vmid_to_tags_dict)

  def test_filter_prep(self):
    self.assertEqual(self.vsystem.filter_prep(), self.exp_filtered_rules_d_to_s)

  if '__name__' == '__main__':
    unittest.main()