import argparse
import json
import time
from flask import Flask, request, g
from system_loader import SystemLoader
from vulnerability_scanner import VulnerabilityScanner

INPUT_FILE = 'data/input.json'

app = Flask(__name__)

# used for stats
requests_count = 0
vm_count = 0
total_elapsed = 0

# routes
@app.route('/')
def home():
    """Main home route, welcome"""
    return '<h1>Welcome to Orca Security assignment!<h1>'

@app.before_request
def before_request():
    g.start_time = time.time()


@app.teardown_request
def teardown_request(req):
    global total_elapsed, requests_count
    requests_count += 1
    total_elapsed += time.time() - g.start_time
    return req

# route we want to track
@app.route('/api/v1/stats', methods=["GET"])
def stats():
    """API endpoint for receiving the stats obj in json format.
    vm_count: int,
    request_count: int,
    avg_request_time: float
    :returns: str."""
    global vm_count, requests_count, total_elapsed

    if vm_count == 0:
        vm_count = len(vsystem.get_vms())
    
    # check that we don't divide by zero
    if requests_count == 0:
        return json.dumps({
        "vm_count": vm_count,
        "request_count": 0,
        "average_request_time": 0
    })

    return json.dumps({
        "vm_count": vm_count,
        "request_count": requests_count,
        "average_request_time": total_elapsed/requests_count
    })


# route we want to track
@app.route('/api/v1/attack', methods=["GET"])
def attack():
    """Get a query vm_id and check which vm's is the vm exposed to via firewall rules.
    :returns: list - of vm's potentially able to attack it."""
    arguments = request.args
    if 'vm_id' in arguments:
        target_id = arguments.get('vm_id')
    else:
        return json.dumps("ID not in the system.")

    new_scan = VulnerabilityScanner(vm_id=target_id,
                                    vmid_dict=vsystem.get_vmid_to_tags(),
                                    filtered_rules=vsystem.get_filetered_rules())

    attackers = new_scan.find_potential_attackers()
    return json.dumps(attackers)



if __name__ == '__main__':

    # create a parser for options and arguments
    parser = argparse.ArgumentParser(description='Run the input file with flags')
    parser.add_argument('-i', '--input', help='set flask file to use', default='data/input.json')
    parser.add_argument('-p', '--port', help='set flask port to use', default=80)
    args = parser.parse_args()

    port = int(args.port)

    # load vm_system from our input file in order to generate
    # vms, fw_rules, vm_id to tags dictionary, and filtered fw_rules via online vms.
    vsystem = SystemLoader(args.input)
    
    app.run(port=port)

